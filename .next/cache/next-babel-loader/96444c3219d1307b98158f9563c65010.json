{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/satoshi/twitter_clone/components/CreateTweetForm.tsx\";\nimport { Button, Row, Col, Input } from \"antd\";\nimport { mutate } from \"swr\";\nimport { prisma } from \"prisma\";\nimport { useState } from \"react\";\nimport { useFeed } from \"./util/hooks\";\nexport const CreateTweetForm = () => {\n  const {\n    0: input,\n    1: setInput\n  } = useState(\"\");\n  const {\n    feed\n  } = useFeed();\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    style: {\n      padding: \"2rem\"\n    },\n    onSubmit: async e => {\n      e.preventDefault(); // we include \"false\" here to ask SWR not to revalidate the cache with\n      // the feed returned from the server. we'll remove this after the next section\n\n      const tweet = await prisma.tweet.create({\n        data: {\n          text: \"Hello, Twitter!\"\n        }\n      });\n      mutate(\"/api/feed\", [{\n        text: input,\n        author: {\n          username: \"Marshall Mathers\"\n        }\n      }, ...feed], false);\n      setInput(\"\");\n    },\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          value: input,\n          onChange: e => setInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          htmlType: \"submit\",\n          children: \"Tweet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/satoshi/twitter_clone/components/CreateTweetForm.tsx"],"names":["Button","Row","Col","Input","mutate","prisma","useState","useFeed","CreateTweetForm","input","setInput","feed","padding","e","preventDefault","tweet","create","data","text","author","username","target","value"],"mappings":";;AACA,SAASA,MAAT,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,KAApC,QAAiD,MAAjD;AACA,SAASC,MAAT,QAAuB,KAAvB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAWJ,OAAO,EAAxB;AAEA,sBACE;AACE,IAAA,KAAK,EAAE;AAAEK,MAAAA,OAAO,EAAE;AAAX,KADT;AAEE,IAAA,QAAQ,EAAE,MAAMC,CAAN,IAAW;AACnBA,MAAAA,CAAC,CAACC,cAAF,GADmB,CAGnB;AACA;;AAER,YAAMC,KAAK,GAAG,MAAMV,MAAM,CAACU,KAAP,CAAaC,MAAb,CAAoB;AAAEC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR;AAAR,OAApB,CAApB;AACQd,MAAAA,MAAM,CACJ,WADI,EAEJ,CAAC;AAAEc,QAAAA,IAAI,EAAET,KAAR;AAAeU,QAAAA,MAAM,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAZ;AAAvB,OAAD,EAA4D,GAAGT,IAA/D,CAFI,EAGJ,KAHI,CAAN;AAMAD,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,KAhBH;AAAA,2BAkBE,QAAC,GAAD;AAAA,8BACE,QAAC,GAAD;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,KAAK,EAAED,KAAd;AAAqB,UAAA,QAAQ,EAAEI,CAAC,IAAIH,QAAQ,CAACG,CAAC,CAACQ,MAAF,CAASC,KAAV;AAA5C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,GAAD;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAlBF;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CAlCM","sourcesContent":["\nimport { Button, message, Row, Col, Input } from \"antd\"\nimport { mutate } from \"swr\"\nimport { prisma } from \"prisma\"\nimport { fetcher } from \"./util/fetcher\"\nimport { useState } from \"react\"\nimport { useFeed } from \"./util/hooks\"\n\nexport const CreateTweetForm = () => {\n  const [input, setInput] = useState(\"\")\n  const { feed } = useFeed()\n\n  return (\n    <form\n      style={{ padding: \"2rem\" }}\n      onSubmit={async e => {\n        e.preventDefault()\n\n        // we include \"false\" here to ask SWR not to revalidate the cache with\n        // the feed returned from the server. we'll remove this after the next section\n\nconst tweet = await prisma.tweet.create({ data: { text: \"Hello, Twitter!\" } })\n        mutate(\n          \"/api/feed\",\n          [{ text: input, author: { username: \"Marshall Mathers\" } }, ...feed],\n          false\n        )\n\n        setInput(\"\")\n      }}\n    >\n      <Row>\n        <Col>\n          <Input value={input} onChange={e => setInput(e.target.value)} />\n        </Col>\n\n        <Col>\n          <Button htmlType=\"submit\">Tweet</Button>\n        </Col>\n      </Row>\n    </form>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}